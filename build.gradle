//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "maven-publish"
	alias libs.plugins.loom
	alias libs.plugins.minotaur
}

version = "$baseVersion+$branch"
archivesBaseName = project.slug

repositories {
	maven { url "https://maven.nucleoid.xyz/" }
}

dependencies {
	minecraft libs.mc
	mappings variantOf(libs.yarn) { classifier "v2" }

	modImplementation libs.fl
	modImplementation libs.fapi

	modImplementation libs.placeholder
	modCompileOnly libs.polydex

	include libs.placeholder
	modLocalRuntime libs.polydex
}

processResources {
	final Map<String, String> meta = [
		version       : version,
		modId         : modId,
		modName       : modName,
		modDescription: modDescription,
		homepage      : "https://modrinth.com/mod/${slug}",
		issues        : "https://github.com/${user}/${slug}/issues",
		sources       : "https://github.com/${user}/${slug}",
		license       : license,
		authors       : authors.split(", ").join("\",\n    \""),
		contributors  : contributors.split(", ").join("\",\n    \""),
		members       : "${authors}. Contributions by ${contributors}",
		mc            : compatibleVersions.split(", ")[0],
		fl            : libs.versions.fl.get(),
		fapi          : libs.versions.fapi.get(),
		placeholder   : libs.versions.placeholder.get(),
		polydex       : libs.versions.polydex.get()
	]
	inputs.properties meta
	filesMatching("*.mod.json") { expand(meta) }
	filesMatching("META-INF/*mods.toml") { expand(meta) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

modrinth {
	token = "$System.env.MODRINTH_TOKEN"
	projectId = slug
	versionNumber = project.version
	uploadFile = remapJar
	gameVersions = compatibleVersions.split(", ").toList()
	loaders = compatibleLoaders.split(", ").toList()
	changelog = "$System.env.CHANGELOG"
	syncBodyFrom = "<!--DO NOT EDIT MANUALLY: synced from gh readme-->\n" + rootProject.file("README.md").text
	dependencies {
		required.version "fabric-api", libs.versions.fapi.get()
		embedded.version "placeholder-api", libs.versions.placeholder.get()
		optional.version "polydex", libs.versions.polydex.get()
	}
}
